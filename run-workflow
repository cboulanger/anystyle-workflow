#!/usr/bin/env ruby

# frozen_string_literal: true

# needs to be rewritten using a cli parser

require './lib/bootstrap'
require 'fileutils'
require 'pathname'
require 'json'

# cleanup
cleanup_paths = [
  Workflow::Path.gold_anystyle_json,
  Workflow::Path.gold_csl,
  Workflow::Path.gold_tei,
  Workflow::Path.txt,
  Workflow::Path.ttx,
  Workflow::Path.refs,
  Workflow::Path.anystyle_json,
  Workflow::Path.anystyle_parser_xml,
  Workflow::Path.csl,
  Workflow::Path.csl_rejected,
  Workflow::Path.csl_matched,
  Workflow::Path.tei,
  Workflow::Path.grobid_tei
]

HELP = \
  <<~TEXT
    Usage:
    run-workflow <command>

    Commands:
    extract
        [--model-dir /to/model/dir]
        [--write-files]                   write all intermediary files for inspection purposes
        [--overwrite]
        [--use-(parser|finder)-gold-from /path/to/gold]
                                          overwrite output files with existing gold files of the same
                                          name to improve quality
        --from-(text|pdf) /to/text/dir'   Use either text or pdf as source - must be last argument
        [--limit 10]                      Maximum number of entries - for testing

    stats                                 Generate a CSV file with data on the extraction results and on other
                                          available metadata from vendors listed in 3-metadata/vendors.json
        [--affiliations]                  Output statistics on author's affiliations in the data instead of 
                                          on the number of references

    check
        [--include-default]
        [--fix]                           add missing end-of-line spaces
        [--write-files]                   write the re-labelled gold files to its output folder
        [--parser|--finder]               check only the given model, both if omitted
        [--gold-dir /path/to/gold']       path to the dir containing the gold to be checked, must be last argument
                                          if omitted, the data/0-gold-* folders are used

    export
        [--format]                          Exports to the given format. Supported formats are:
                                               - wos    ISI/WoS tagged file format (default)
        [--out-path /path/to/file.txt]      Optional path to the generated output. Defaults to a timestamped file in the export folder
        [--fulltext-dir /path/to/dir]       Optional path to the directory containing the fulltext files, Needed if 
                                            abstracts and/or keywords should be autogenerated.
        [--fulltext-ignore foo,bar,baz]     When automatically generating abstracts, ignore the given list of regular expressions
        [--no-compact]                      Do not remove empty fields (if required by importer)
        [--encoding]                        The encoding of the output file (defaults to utf-8)
        [--limit 10]                        Maximum number of entries - for testing
        [--no-cache]                        Do not use cached data


    import-metadata 
        [--from openalex,wos,...]           Comma-separated list (use quotes if using whitespace) of datasources to import
                                            data from
        [--source-dir path/to/dir]          Directory containing the items to get metadata for. Filenames must be 
                                            DOIs (with "/" substituted by "_"). Defaults to "data/2-txt"
        [--limit 10]                        Maximum number of entries - for testing
        [--no-cache]                        Do not use cached data

    General parameters:
        --verbose                           Output additional information
        --clean                             Clean output directories before running command

  TEXT

puts HELP if ARGV.include?('--help') || ARGV.length.zero?

if ARGV.include? '--clean'
  cleanup_paths.each do |dir_path|
    puts "Cleaning up #{dir_path}..."
    Dir.glob("#{dir_path}/*").select { |f| File.file?(f) && !File.basename(f).start_with?('.') }.each do |file|
      FileUtils.rm(file)
    end
  end
end

# Extraction workflow
if ARGV.include? 'extract'

  arg_name = '--from-pdf'
  pdf_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--from-text'
  text_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--use-parser-gold-from'
  parser_gold_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--use-finder-gold-from'
  finder_gold_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--model-dir'
  model_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--limit'
  limit = ARGV[(ARGV.index(arg_name) + 1)].to_i if ARGV.include? arg_name

  if ARGV.include? '--verbose'
    puts \
      <<~TEXT.freeze
        pdf_dir:          #{pdf_dir}
        text_dir:         #{text_dir}
        parser_gold_dir:  #{parser_gold_dir}
        finder_gold_dir:  #{finder_gold_dir}
        model_dir:        #{model_dir}
      TEXT
  end

  if !pdf_dir.nil?
    Workflow::Extraction.pdf_to_txt pdf_dir
  elsif text_dir.nil?
    raise RuntimeError('You have to provide either a PDF or text source dir')
  end

  Workflow::Extraction.doc_to_csl_json(
    source_dir: text_dir,
    overwrite: ARGV.include?('--overwrite'),
    output_intermediaries: ARGV.include?('--write-files'),
    model_dir:,
    parser_gold_dir:,
    finder_gold_dir:,
    verbose: ARGV.include?('--verbose'),
    limit:
  )
  Workflow::Extraction.write_statistics verbose: ARGV.include?('--verbose')
end

if ARGV.include? 'stats'
  Workflow::Extraction.write_statistics(
    verbose: ARGV.include?('--verbose'),
    type: ARGV.include?('--affiliations') ? "affiliation" : "reference"
  )
end

if ARGV.include? 'check'
  maybe_path = ARGV.last
  if ARGV.include?('--gold-dir') && !maybe_path.nil?
    parser_gold_path = File.join(maybe_path.untaint, 'parser')
    finder_gold_path = File.join(maybe_path.untaint, 'finder')
  else
    parser_gold_path = Workflow::Path.gold_anystyle_xml
    finder_gold_path = Workflow::Path.gold_anystyle_ttx
  end

  if ARGV.include? '--include-default'
    puts "Using default model at at #{AnyStyle.parser.model.path}:"

    puts "Evaluating finder gold at #{finder_gold_path}..."
    Workflow::Check.run finder_gold_path, outfile_name: 'check-default-finder'

    puts "Evaluating parser gold at #{parser_gold_path} ..."
    Workflow::Check.run parser_gold_path, outfile_name: 'check-default-parser'
  end

  if ARGV.include? '--fix'
    Dir.glob("#{finder_gold_path}/*.ttx").each do |file_path|
      content = File.read(file_path.untaint)
      lines = content.split("\n").map do |line|
        (line.end_with? '|') ? "#{line} " : line
      end
      File.write(file_path, lines.join("\n"))
    end
  end

  Datamining::AnyStyle.load_models
  puts "Using custom model at at #{AnyStyle.parser.model.path}:"

  if ARGV.include?('--finder') || !ARGV.include?('--parser')
    puts "Evaluating finder gold at #{finder_gold_path}..."
    if ARGV.include? '--write-files'
      Dir.glob("#{finder_gold_path}/*.ttx").each do |file_path|
        copy_of_gold_path = File.join(Workflow::Path.ttx, "#{File.basename(file_path, '.ttx')}-gold.ttx").untaint
        FileUtils.copy(file_path, copy_of_gold_path)
        out_path = File.join(Workflow::Path.ttx, File.basename(file_path)).untaint
        puts "- #{File.basename(file_path)}" if ARGV.include? '--verbose'
        File.write(out_path, Workflow::Check.relabel(file_path))
      end
    end
    Workflow::Check.run finder_gold_path, outfile_name: 'check-custom-finder'
  end

  if ARGV.include?('--parser') || !ARGV.include?('--finder')
    puts "Evaluating parser gold at #{parser_gold_path}..."
    if ARGV.include? '--write-files'
      Dir.glob("#{parser_gold_path}/*.xml").each do |file_path|
        copy_of_gold_path = File.join(Workflow::Path.anystyle_parser_xml,
                                      "#{File.basename(file_path, '.xml')}-gold.xml").untaint
        FileUtils.copy(file_path, copy_of_gold_path)
        out_path = File.join(Workflow::Path.anystyle_parser_xml, File.basename(file_path)).untaint
        puts "- #{File.basename(file_path)}" if ARGV.include? '--verbose'
        File.write(out_path, Workflow::Check.relabel(file_path))
      end
    end
    Workflow::Check.run parser_gold_path, outfile_name: 'check-custom-parser'
  end
end

if ARGV.include? 'export'

  format = 'wos'

  arg_name = '--format'
  format = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--fulltext-dir'
  text_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--out-path'
  export_file_path = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--encoding'
  encoding = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--fulltext-ignore'
  remove_list = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name
  remove_list = remove_list.split(",").map(&:strip) if remove_list.is_a? String

  arg_name = '--limit'
  limit = ARGV[(ARGV.index(arg_name) + 1)].to_i if ARGV.include? arg_name


  Workflow::Dataset.public_send("to_#{format}",
                                export_file_path:,
                                verbose: ARGV.include?('--verbose'),
                                compact: !ARGV.include?('--no-compact'),
                                text_dir:,
                                remove_list: remove_list || [],
                                encoding: encoding || 'utf-8',
                                limit:,
                                use_cache: !ARGV.include?('--no-cache'))
end

if ARGV.include? 'import-metadata'
  arg_name = '--source-dir'
  source_dir = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  arg_name = '--limit'
  limit = ARGV[(ARGV.index(arg_name) + 1)].to_i if ARGV.include? arg_name

  arg_name = '--from'
  ds = ARGV[(ARGV.index(arg_name) + 1)].split(",").map(&:strip) if ARGV.include? arg_name

  arg_name = '--outfile-suffix'
  outfile_suffix = ARGV[(ARGV.index(arg_name) + 1)] if ARGV.include? arg_name

  Workflow::Import.generate_csl_metadata(
    datasources: ds,
    outfile_suffix:,
    limit: limit,
    source_dir:,
    verbose: ARGV.include?('--verbose'),
    use_cache: !ARGV.include?('--no-cache'))
end
